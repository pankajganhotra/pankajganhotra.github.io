{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["getRandomColors","n","Array","fill","map","Math","floor","random","toString","App","useState","cards","setCards","visible","setVisible","level","setLevel","useEffect","generateCards","useCallback","console","log","length","c","i","arr","push","id","color","flipped","shuffle","handleClick","selectedCard","card","setTimeout","detectGameOver","every","className","onClick","l","style","backgroundColor","height","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAAe,I,YCMf,SAASA,EAAgBC,GACvB,OAAO,IAAIC,MAAM,EAAID,GAAGE,OAAOC,KAAI,iBAAM,IAAMC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,OAG/F,IA6GeC,EA7GH,WAEV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,mBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAgBC,uBAAY,WAChCC,QAAQC,IAAI,gBAAiBN,GAC7BK,QAAQC,IAAI,gBAAiBrB,EAAgBe,GAAOO,QACpD,IAAMX,EAAQ,GACdX,EAAgBe,GACbX,KAAI,SAACmB,EAAGC,EAAGC,GAGVd,EAAMe,KAAK,CACTC,GAAIH,EACJI,MAAOL,EACPM,SAAS,IAEXlB,EAAMe,KAAK,CACTC,GAAIH,EAAIC,EAAIH,OACZM,MAAOL,EACPM,SAAS,OAGfjB,EAASD,EAAMmB,aACd,CAACf,IAEEgB,EAAcZ,uBAAY,SAACa,GAE3BA,EAAaH,UAEjBjB,GAAS,SAAAD,GAAK,OAAIA,EAAMP,KAAI,SAAA6B,GAAI,OAAIA,EAAKN,KAAOK,EAAaL,GAAzB,2BAAmCM,GAAnC,IAAyCJ,SAAS,IAASI,QAExE,IAAnBpB,EAAQS,OAENU,EAAaJ,QAAUf,EAAQ,GAAGe,OAEpCd,EAAW,IACXoB,YAAW,WAETtB,GAAS,SAAAD,GAAK,OAAIA,EAAMP,KAAI,SAAA6B,GAAI,OAAIA,EAAKN,KAAOK,EAAaL,IAAMM,EAAKN,KAAOd,EAAQ,GAAGc,GAAtD,2BAAgEM,GAAhE,IAAsEJ,SAAS,IAAUI,UAC5H,MAGHnB,EAAW,IAIbA,EAAW,GAAD,mBAAKD,GAAL,CAAcmB,QAEzB,CAACnB,IAGEsB,EAAiBhB,uBAAY,WACjC,OAAOR,EAAMyB,OAAM,SAAAH,GAAI,OAAIA,EAAKJ,aAC/B,CAAClB,IAOJ,OACE,sBAAK0B,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,+CAEF,uBAAMA,UAAU,WAAhB,UACE,gCACE,yCAAYtB,KACZ,wBAAQuB,QAAS,kBAAMtB,GAAS,SAAAuB,GAAC,OAAIA,EAAI,MAAzC,2BAGF,qBAAKF,UAAU,YAAf,SACE,qBAAKA,UAAU,iBAAf,SAEIF,IAGI,sBAAKE,UAAU,YAAf,UACE,2CACA,wBAAQC,QAAS,WACfpB,KADF,2BAKFP,EAAMP,KAAI,SAAC6B,EAAMT,GAAP,OACV,qBAAaa,UAAU,YAAYC,QAAS,kBAAMP,EAAYE,IAC5DO,MAAO,CACLC,gBAAiBR,EAAKJ,QAAUI,EAAKL,MAAQ,OAC3Cc,OAAO,GAAD,OAAM,IAAM3B,EAAZ,MAAwB4B,MAAM,GAAD,OAAM,IAAM5B,EAAZ,QAH/BS,iBC1FboB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fe8c44be.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport { useCallback, useEffect, useState } from 'react';\n\n\n//Random Colors Array\nfunction getRandomColors(n) {\n  return new Array(8 * n).fill().map(() => '#' + Math.floor(Math.random() * 16777215).toString(16));\n}\n\nconst App = () => {\n\n  const [cards, setCards] = useState([]);\n  const [visible, setVisible] = useState([]);\n  const [level, setLevel] = useState(1);\n\n  useEffect(() => {\n    generateCards();\n  }, [level]);\n\n  const generateCards = useCallback(() => {\n    console.log('generateCards', level);\n    console.log('generateCards', getRandomColors(level).length);\n    const cards = [];\n    getRandomColors(level)\n      .map((c, i, arr) => {\n        // console.log(i);\n        //Two Cards with the same color\n        cards.push({\n          id: i,\n          color: c,\n          flipped: false,\n        })\n        cards.push({\n          id: i + arr.length,\n          color: c,\n          flipped: false,\n        })\n      })\n    setCards(cards.shuffle());\n  }, [level])\n\n  const handleClick = useCallback((selectedCard) => {\n    //If the card is already flipped, return\n    if (selectedCard.flipped) return;\n    //Show the card\n    setCards(cards => cards.map(card => card.id === selectedCard.id ? { ...card, flipped: true } : card))\n    //if one card is already visible, check if it's the same\n    if (visible.length === 1) {\n      //if the clicked card is the same as the visible card\n      if (selectedCard.color !== visible[0].color) {\n        //hide both cards\n        setVisible([]) //clear the visible cards immediately\n        setTimeout(() => {\n          //hide the cards after a short delay\n          setCards(cards => cards.map(card => card.id === selectedCard.id || card.id === visible[0].id ? { ...card, flipped: false } : card))\n        }, 500);\n      } else {\n        //if the cards are the same, remove them from the visible cards\n        setVisible([])\n      }\n    } else {\n      //if no card is visible, add the card to the visible array\n      setVisible([...visible, selectedCard])\n    }\n  }, [visible])\n\n\n  const detectGameOver = useCallback(() => {\n    return cards.every(card => card.flipped)\n  }, [cards])\n\n\n\n\n\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1>Memory Game</h1>\n      </header>\n      <main className=\"app-body\">\n        <div>\n          <h2>Level: {level}</h2>\n          <button onClick={() => setLevel(l => l + 1)}>Next Level</button>\n        </div>\n\n        <div className=\"container\">\n          <div className=\"grid-container\">\n            {\n              detectGameOver()\n                ?\n                (\n                  <div className=\"game-over\">\n                    <h1>Game Over</h1>\n                    <button onClick={() => {\n                      generateCards()\n                    }}>Play Again</button>\n                  </div>\n                )\n                : cards.map((card, i) => (\n                  <div key={i} className=\"grid-item\" onClick={() => handleClick(card)}\n                    style={{\n                      backgroundColor: card.flipped ? card.color : \"grey\"\n                      , height: `${(100 / level)}px`, width: `${(100 / level)}px`\n                    }}>\n                  </div>\n                ))\n            }\n          </div>\n        </div>\n\n\n      </main>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}